# -*- coding: utf-8 -*-
"""
wM-Bus cihaz sÃ¼rÃ¼cÃ¼lerini yÃ¶neten modÃ¼l.
"""

import os
import sys
import importlib
import inspect
import logging
from driver_base import WMBusDriverBase

# Loglama
logger = logging.getLogger("wmbus_driver_manager")

class DriverManager:
    """
    wM-Bus cihaz sÃ¼rÃ¼cÃ¼lerini yÃ¶netme sÄ±nÄ±fÄ±.
    TÃ¼m kayÄ±tlÄ± sÃ¼rÃ¼cÃ¼leri takip eder ve telgraflara uygun sÃ¼rÃ¼cÃ¼yÃ¼ bulur.
    """
    def __init__(self):
        self.drivers = []
        self.load_drivers()
    
    def load_drivers(self):
        """TÃ¼m kullanÄ±labilir sÃ¼rÃ¼cÃ¼leri yÃ¼kler."""
        # Mevcut dizindeki tÃ¼m driver_* dosyalarÄ±nÄ± bul
        try:
            driver_files = [f for f in os.listdir('.') if f.startswith('driver_') and f.endswith('.py') and f != 'driver_base.py' and f != 'driver_manager.py']
            logger.info(f"Bulunan sÃ¼rÃ¼cÃ¼ dosyalarÄ±: {driver_files}")
        except Exception as e:
            logger.error(f"SÃ¼rÃ¼cÃ¼ dosyalarÄ± listelenirken hata: {e}")
            driver_files = []
        
        for file in driver_files:
            try:
                # .py uzantÄ±sÄ±nÄ± kaldÄ±r
                module_name = file[:-3]
                
                # ModÃ¼lÃ¼ dinamik olarak iÃ§e aktar
                module = importlib.import_module(module_name)
                
                # ModÃ¼ldeki tÃ¼m sÄ±nÄ±flarÄ± bul
                for name, obj in inspect.getmembers(module, inspect.isclass):
                    # WMBusDriverBase'den tÃ¼retilmiÅŸ ve aynÄ± sÄ±nÄ±f deÄŸilse
                    if issubclass(obj, WMBusDriverBase) and obj != WMBusDriverBase:
                        logger.info(f"SÃ¼rÃ¼cÃ¼ yÃ¼klendi: {name} ({module_name})")
                        # SÃ¼rÃ¼cÃ¼yÃ¼ listeye ekle (sÄ±nÄ±f olarak, instance deÄŸil)
                        self.drivers.append(obj)
            except Exception as e:
                logger.error(f"SÃ¼rÃ¼cÃ¼ yÃ¼klenirken hata: {file} - {e}")
        
        logger.info(f"Toplam {len(self.drivers)} sÃ¼rÃ¼cÃ¼ yÃ¼klendi")
    
    def find_driver(self, telegram_info):
        """
        Telgraf bilgilerine gÃ¶re uygun sÃ¼rÃ¼cÃ¼yÃ¼ bulur.
        
        Args:
            telegram_info: Ã‡Ã¶zÃ¼mlenmiÅŸ telgraf bilgisi
            
        Returns:
            WMBusDriverBase instance veya None
        """
        manufacturer_id = telegram_info.get("manufacturer_code")
        device_type = telegram_info.get("device_type_code")
        ci_field = telegram_info.get("ci_field")
        
        logger.info(f"SÃ¼rÃ¼cÃ¼ aranÄ±yor: Ãœretici={manufacturer_id}, Cihaz Tipi={device_type}, CI={ci_field}")
        
        # Yeni detect mekanizmasÄ±
        for driver_class in self.drivers:
            try:
                # EÄŸer sÄ±nÄ±fta detect metodu varsa kullan
                if hasattr(driver_class, 'detect'):
                    driver = driver_class(None)
                    driver.telegram_info = telegram_info
                    
                    # Cihaz algÄ±lama metodunu Ã§aÄŸÄ±r
                    if driver.detect(telegram_info):
                        logger.info(f"Detect metoduyla sÃ¼rÃ¼cÃ¼ bulundu: {driver_class.__name__}")
                        return driver
            except Exception as e:
                logger.error(f"Detect kontrolÃ¼nde hata: {driver_class.__name__} - {e}")
        
        # CI alanÄ± Ã¶zel sÃ¼rÃ¼cÃ¼leri kontrol et (eÄŸer CI alanÄ± varsa)
        if ci_field and ci_field in ("0xa1", "0xa2", "0xa3"):
            matching_drivers = []
            for driver_class in self.drivers:
                try:
                    # Driver sÄ±nÄ±fÄ±nÄ±n Ã¶rneÄŸini oluÅŸtur
                    driver = driver_class(None)
                    
                    # Telegram bilgisini sÃ¼rÃ¼cÃ¼ye ekle
                    driver.telegram_info = telegram_info
                    
                    # CI alanÄ±na gÃ¶re eÅŸleÅŸme kontrolÃ¼ yap
                    if hasattr(driver, 'matches_ci') and driver.matches_ci(ci_field):
                        matching_drivers.append(driver)
                        logger.info(f"CI eÅŸleÅŸmeli sÃ¼rÃ¼cÃ¼ bulundu: {driver_class.__name__}")
                except Exception as e:
                    logger.error(f"CI eÅŸleÅŸme kontrolÃ¼nde hata: {driver_class.__name__} - {e}")
            
            # Birden fazla eÅŸleÅŸen sÃ¼rÃ¼cÃ¼ varsa, ilkini seÃ§
            if matching_drivers:
                if len(matching_drivers) > 1:
                    logger.warning(f"Birden fazla sÃ¼rÃ¼cÃ¼ bulundu: {[d.__class__.__name__ for d in matching_drivers]}")
                return matching_drivers[0]
        
        # Tam eÅŸleÅŸme bulmaya Ã§alÄ±ÅŸ
        for driver_class in self.drivers:
            try:
                # Driver sÄ±nÄ±fÄ±nÄ±n Ã¶rneÄŸini oluÅŸtur
                driver = driver_class(None)
                
                # EÅŸleÅŸme kontrolÃ¼
                if driver.matches(manufacturer_id, device_type):
                    logger.info(f"SÃ¼rÃ¼cÃ¼ bulundu: {driver_class.__name__}")
                    return driver
            except Exception as e:
                logger.error(f"SÃ¼rÃ¼cÃ¼ eÅŸleÅŸme kontrolÃ¼nde hata: {driver_class.__name__} - {e}")
        
        # Sadece Ã¼retici ID'sine gÃ¶re bulamazsak
        for driver_class in self.drivers:
            try:
                driver = driver_class(None)
                if driver.matches(manufacturer_id, None):
                    logger.info(f"Ãœretici eÅŸleÅŸmeli sÃ¼rÃ¼cÃ¼ bulundu: {driver_class.__name__}")
                    return driver
            except Exception as e:
                logger.error(f"Ãœretici eÅŸleÅŸme kontrolÃ¼nde hata: {driver_class.__name__} - {e}")
        
        # Sadece cihaz tipine gÃ¶re bulamazsak
        for driver_class in self.drivers:
            try:
                driver = driver_class(None)
                if driver.matches(None, device_type):
                    logger.info(f"Cihaz tipi eÅŸleÅŸmeli sÃ¼rÃ¼cÃ¼ bulundu: {driver_class.__name__}")
                    return driver
            except Exception as e:
                logger.error(f"Cihaz tipi eÅŸleÅŸme kontrolÃ¼nde hata: {driver_class.__name__} - {e}")
        
        logger.warning(f"Uygun sÃ¼rÃ¼cÃ¼ bulunamadÄ±: {manufacturer_id}, {device_type}")
        return None
    
    def apply_driver(self, telegram_data):
        """
        Ã‡Ã¶zÃ¼mlenmiÅŸ telgraf verilerine uygun sÃ¼rÃ¼cÃ¼yÃ¼ uygular.
        
        Args:
            telegram_data: wmbus_parser'dan gelen Ã§Ã¶zÃ¼mlenmiÅŸ veri
            
        Returns:
            GÃ¼ncellenmiÅŸ telegram_data (driver Ã§Ä±ktÄ±larÄ± dahil)
        """
        if not telegram_data:
            logger.warning("Telgraf verisi boÅŸ, sÃ¼rÃ¼cÃ¼ uygulanamadÄ±")
            return telegram_data

        telegram_info = telegram_data.get("telegram_info", {})
        logger.info(f"SÃ¼rÃ¼cÃ¼ uygulanacak telgraf: {telegram_info.get('manufacturer_code')}, {telegram_info.get('device_type_code')}")

        # CI alanÄ± kontrolÃ¼ (Ã¶zel format iÃ§in)
        ci_field = telegram_info.get("ci_field")
        if ci_field in ("0xa1", "0xa2", "0xa3"):
            logger.info(f"Ã–zel CI alanÄ± tespit edildi: {ci_field}")

        driver = self.find_driver(telegram_info)

        if driver:
            logger.info(f"SÃ¼rÃ¼cÃ¼ bulundu ve uygulanÄ±yor: {driver.__class__.__name__}")
            try:
                result = driver.parse_telegram(telegram_data)

                if result:
                    logger.info("SÃ¼rÃ¼cÃ¼ Ã§Ã¶zÃ¼mlemesi baÅŸarÄ±lÄ±")

                    # ğŸ”§ SÃ¼rÃ¼cÃ¼ Ã§Ä±ktÄ±sÄ±nÄ± telegram_data'ya entegre et
                    if isinstance(result, dict):
                        telegram_data.update(result)

                    return telegram_data
                else:
                    logger.warning("SÃ¼rÃ¼cÃ¼ boÅŸ sonuÃ§ dÃ¶ndÃ¼rdÃ¼")
            except Exception as e:
                logger.error(f"SÃ¼rÃ¼cÃ¼ Ã§Ã¶zÃ¼mleme hatasÄ±: {driver.__class__.__name__} - {e}")
                import traceback
                logger.error(traceback.format_exc())
        else:
            logger.warning("Uygun sÃ¼rÃ¼cÃ¼ bulunamadÄ±")

        return telegram_data

# Singleton Driver Manager Ã¶rneÄŸi - hemen baÅŸlat
_driver_manager = DriverManager()

def get_driver_manager():
    """
    DriverManager singleton Ã¶rneÄŸini dÃ¶ndÃ¼rÃ¼r.
    
    Returns:
        DriverManager: Global driver manager Ã¶rneÄŸi
    """
    global _driver_manager
    return _driver_manager

def apply_driver(telegram_data):
    """
    Ã‡Ã¶zÃ¼mlenmiÅŸ telgraf verilerine uygun sÃ¼rÃ¼cÃ¼yÃ¼ uygular.
    
    Args:
        telegram_data: wmbus_parser'dan gelen Ã§Ã¶zÃ¼mlenmiÅŸ veri
        
    Returns:
        SÃ¼rÃ¼cÃ¼ tarafÄ±ndan oluÅŸturulmuÅŸ cihaza Ã¶zel veriler veya
        sÃ¼rÃ¼cÃ¼ yoksa orijinal veriler
    """
    manager = get_driver_manager()
    return manager.apply_driver(telegram_data)